define(["require","THREE"],function(e){"use strict";var t=e("THREE"),n,r=1e-5,i=0,s=1,o=2,u=3;return n=function(e){var r,i,s,o,u,a,f,l=[],c;if(e instanceof t.Geometry)this.matrix=new t.Matrix4;else{if(!(e instanceof t.Mesh)){if(e instanceof n.Node)return this.tree=e,this.matrix=new t.Matrix4,this;throw"ThreeBSP: Given geometry is unsupported"}e.updateMatrix(),this.matrix=e.matrix.clone(),e=e.geometry}for(r=0,i=e.faces.length;r<i;r++){s=e.faces[r],u=e.faceVertexUvs[0][r],f=new n.Polygon;if(s instanceof t.Face3)o=e.vertices[s.a],a=u?new t.Vector2(u[0].x,u[0].y):null,o=new n.Vertex(o.x,o.y,o.z,s.vertexNormals[0],a),o.applyMatrix4(this.matrix),f.vertices.push(o),o=e.vertices[s.b],a=u?new t.Vector2(u[1].x,u[1].y):null,o=new n.Vertex(o.x,o.y,o.z,s.vertexNormals[1],a),o.applyMatrix4(this.matrix),f.vertices.push(o),o=e.vertices[s.c],a=u?new t.Vector2(u[2].x,u[2].y):null,o=new n.Vertex(o.x,o.y,o.z,s.vertexNormals[2],a),o.applyMatrix4(this.matrix),f.vertices.push(o);else{if(!typeof t.Face4)throw"Invalid face type at index "+r;o=e.vertices[s.a],a=u?new t.Vector2(u[0].x,u[0].y):null,o=new n.Vertex(o.x,o.y,o.z,s.vertexNormals[0],a),o.applyMatrix4(this.matrix),f.vertices.push(o),o=e.vertices[s.b],a=u?new t.Vector2(u[1].x,u[1].y):null,o=new n.Vertex(o.x,o.y,o.z,s.vertexNormals[1],a),o.applyMatrix4(this.matrix),f.vertices.push(o),o=e.vertices[s.c],a=u?new t.Vector2(u[2].x,u[2].y):null,o=new n.Vertex(o.x,o.y,o.z,s.vertexNormals[2],a),o.applyMatrix4(this.matrix),f.vertices.push(o),o=e.vertices[s.d],a=u?new t.Vector2(u[3].x,u[3].y):null,o=new n.Vertex(o.x,o.y,o.z,s.vertexNormals[3],a),o.applyMatrix4(this.matrix),f.vertices.push(o)}f.calculateProperties(),l.push(f)}this.tree=new n.Node(l)},n.prototype.subtract=function(e){var t=this.tree.clone(),r=e.tree.clone();return t.invert(),t.clipTo(r),r.clipTo(t),r.invert(),r.clipTo(t),r.invert(),t.build(r.allPolygons()),t.invert(),t=new n(t),t.matrix=this.matrix,t},n.prototype.union=function(e){var t=this.tree.clone(),r=e.tree.clone();return t.clipTo(r),r.clipTo(t),r.invert(),r.clipTo(t),r.invert(),t.build(r.allPolygons()),t=new n(t),t.matrix=this.matrix,t},n.prototype.intersect=function(e){var t=this.tree.clone(),r=e.tree.clone();return t.invert(),r.clipTo(t),r.invert(),t.clipTo(r),r.clipTo(t),t.build(r.allPolygons()),t.invert(),t=new n(t),t.matrix=this.matrix,t},n.prototype.toGeometry=function(){var e,n,r=(new t.Matrix4).getInverse(this.matrix),i=new t.Geometry,s=this.tree.allPolygons(),o=s.length,u,a,f={},l,c,h,p,d,v;for(e=0;e<o;e++){u=s[e],a=u.vertices.length;for(n=2;n<a;n++)v=[],p=u.vertices[0],v.push(new t.Vector2(p.uv.x,p.uv.y)),p=new t.Vector3(p.x,p.y,p.z),p.applyMatrix4(r),typeof f[p.x+","+p.y+","+p.z]!="undefined"?l=f[p.x+","+p.y+","+p.z]:(i.vertices.push(p),l=f[p.x+","+p.y+","+p.z]=i.vertices.length-1),p=u.vertices[n-1],v.push(new t.Vector2(p.uv.x,p.uv.y)),p=new t.Vector3(p.x,p.y,p.z),p.applyMatrix4(r),typeof f[p.x+","+p.y+","+p.z]!="undefined"?c=f[p.x+","+p.y+","+p.z]:(i.vertices.push(p),c=f[p.x+","+p.y+","+p.z]=i.vertices.length-1),p=u.vertices[n],v.push(new t.Vector2(p.uv.x,p.uv.y)),p=new t.Vector3(p.x,p.y,p.z),p.applyMatrix4(r),typeof f[p.x+","+p.y+","+p.z]!="undefined"?h=f[p.x+","+p.y+","+p.z]:(i.vertices.push(p),h=f[p.x+","+p.y+","+p.z]=i.vertices.length-1),d=new t.Face3(l,c,h,new t.Vector3(u.normal.x,u.normal.y,u.normal.z)),i.faces.push(d),i.faceVertexUvs[0].push(v)}return i},n.prototype.toMesh=function(e){var n=this.toGeometry(),r=new t.Mesh(n,e);return r.position.setFromMatrixPosition(this.matrix),r.rotation.setFromRotationMatrix(this.matrix),r},n.Polygon=function(e,t,n){e instanceof Array||(e=[]),this.vertices=e,e.length>0?this.calculateProperties():this.normal=this.w=undefined},n.Polygon.prototype.calculateProperties=function(){var e=this.vertices[0],t=this.vertices[1],n=this.vertices[2];return this.normal=t.clone().subtract(e).cross(n.clone().subtract(e)).normalize(),this.w=this.normal.clone().dot(e),this},n.Polygon.prototype.clone=function(){var e,t,r=new n.Polygon;for(e=0,t=this.vertices.length;e<t;e++)r.vertices.push(this.vertices[e].clone());return r.calculateProperties(),r},n.Polygon.prototype.flip=function(){var e,t=[];this.normal.multiplyScalar(-1),this.w*=-1;for(e=this.vertices.length-1;e>=0;e--)t.push(this.vertices[e]);return this.vertices=t,this},n.Polygon.prototype.classifyVertex=function(e){var t=this.normal.dot(e)-this.w;return t<-r?o:t>r?s:i},n.Polygon.prototype.classifySide=function(e){var t,n,r,a=0,f=0,l=e.vertices.length;for(t=0;t<l;t++)n=e.vertices[t],r=this.classifyVertex(n),r===s?a++:r===o&&f++;return a>0&&f===0?s:a===0&&f>0?o:a===0&&f===0?i:u},n.Polygon.prototype.splitPolygon=function(e,t,r,a,f){var l=this.classifySide(e);if(l===i)(this.normal.dot(e.normal)>0?t:r).push(e);else if(l===s)a.push(e);else if(l===o)f.push(e);else{var c,h,p,d,v,m,g,y,b,w=[],E=[];for(h=0,c=e.vertices.length;h<c;h++)p=(h+1)%c,m=e.vertices[h],g=e.vertices[p],d=this.classifyVertex(m),v=this.classifyVertex(g),d!=o&&w.push(m),d!=s&&E.push(m),(d|v)===u&&(y=(this.w-this.normal.dot(m))/this.normal.dot(g.clone().subtract(m)),b=m.interpolate(g,y),w.push(b),E.push(b));w.length>=3&&a.push((new n.Polygon(w)).calculateProperties()),E.length>=3&&f.push((new n.Polygon(E)).calculateProperties())}},n.Vertex=function(e,n,r,i,s){this.x=e,this.y=n,this.z=r,this.normal=i||new t.Vector3,this.uv=s||new t.Vector2},n.Vertex.prototype.clone=function(){return new n.Vertex(this.x,this.y,this.z,this.normal.clone(),this.uv.clone())},n.Vertex.prototype.add=function(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this},n.Vertex.prototype.subtract=function(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this},n.Vertex.prototype.multiplyScalar=function(e){return this.x*=e,this.y*=e,this.z*=e,this},n.Vertex.prototype.cross=function(e){var t=this.x,n=this.y,r=this.z;return this.x=n*e.z-r*e.y,this.y=r*e.x-t*e.z,this.z=t*e.y-n*e.x,this},n.Vertex.prototype.normalize=function(){var e=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);return this.x/=e,this.y/=e,this.z/=e,this},n.Vertex.prototype.dot=function(e){return this.x*e.x+this.y*e.y+this.z*e.z},n.Vertex.prototype.lerp=function(e,t){return this.add(e.clone().subtract(this).multiplyScalar(t)),this.normal.add(e.normal.clone().sub(this.normal).multiplyScalar(t)),this.uv.add(e.uv.clone().sub(this.uv).multiplyScalar(t)),this},n.Vertex.prototype.interpolate=function(e,t){return this.clone().lerp(e,t)},n.Vertex.prototype.applyMatrix4=function(e){var t=this.x,n=this.y,r=this.z,i=e.elements;return this.x=i[0]*t+i[4]*n+i[8]*r+i[12],this.y=i[1]*t+i[5]*n+i[9]*r+i[13],this.z=i[2]*t+i[6]*n+i[10]*r+i[14],this},n.Node=function(e){var t,r,i=[],s=[];this.polygons=[],this.front=this.back=undefined;if(!(e instanceof Array&&e.length!==0))return;this.divider=e[0].clone();for(t=0,r=e.length;t<r;t++)this.divider.splitPolygon(e[t],this.polygons,this.polygons,i,s);i.length>0&&(this.front=new n.Node(i)),s.length>0&&(this.back=new n.Node(s))},n.Node.isConvex=function(e){var t,n;for(t=0;t<e.length;t++)for(n=0;n<e.length;n++)if(t!==n&&e[t].classifySide(e[n])!==o)return!1;return!0},n.Node.prototype.build=function(e){var t,r,i=[],s=[];this.divider||(this.divider=e[0].clone());for(t=0,r=e.length;t<r;t++)this.divider.splitPolygon(e[t],this.polygons,this.polygons,i,s);i.length>0&&(this.front||(this.front=new n.Node),this.front.build(i)),s.length>0&&(this.back||(this.back=new n.Node),this.back.build(s))},n.Node.prototype.allPolygons=function(){var e=this.polygons.slice();return this.front&&(e=e.concat(this.front.allPolygons())),this.back&&(e=e.concat(this.back.allPolygons())),e},n.Node.prototype.clone=function(){var e=new n.Node;return e.divider=this.divider.clone(),e.polygons=this.polygons.map(function(e){return e.clone()}),e.front=this.front&&this.front.clone(),e.back=this.back&&this.back.clone(),e},n.Node.prototype.invert=function(){var e,t,n;for(e=0,t=this.polygons.length;e<t;e++)this.polygons[e].flip();return this.divider.flip(),this.front&&this.front.invert(),this.back&&this.back.invert(),n=this.front,this.front=this.back,this.back=n,this},n.Node.prototype.clipPolygons=function(e){var t,n;if(!this.divider)return e.slice();var r=[],i=[];for(t=0,n=e.length;t<n;t++)this.divider.splitPolygon(e[t],r,i,r,i);return this.front&&(r=this.front.clipPolygons(r)),this.back?i=this.back.clipPolygons(i):i=[],r.concat(i)},n.Node.prototype.clipTo=function(e){this.polygons=e.clipPolygons(this.polygons),this.front&&this.front.clipTo(e),this.back&&this.back.clipTo(e)},n});